worker_processes  auto;
events {
    # Allows up to 1024 connections, can be adjusted
    worker_connections  1024;
}

error_log /mnt/error.log debug;


http {
    # See http://licson.net/post/optimizing-nginx-for-large-file-delivery/ for more detail
    # This optimizes the server for HLS fragment delivery
    sendfile off;
    tcp_nopush on;
    # aio on; # didn't work.
    directio 512;
    
    upstream node-backend {
        server localhost:3000 max_fails=0;
    }
    
    # HTTP server required to serve the player and HLS fragments
    server {
        listen 80;
        
        location /on-connect {
            proxy_pass http://node-backend/on-connect$is_args$args;
        }
        
        location /on-play {
            proxy_pass http://node-backend/on-play$is_args$args;
        }
        
        location /on-publish {
            proxy_pass http://node-backend/on-publish$is_args$args;
        }
        
        location /on-youtube-publish {
            proxy_pass http://node-backend/on-youtube-publish$is_args$args;
        }
        
        location /on-twitch-publish {
            proxy_pass http://node-backend/on-twitch-publish$is_args$args;
        }
        
        location /on-facebook-publish {
            proxy_pass http://node-backend/on-facebook-publish$is_args$args;
        }
        
        location /on-play-done {
            proxy_pass http://node-backend/on-play-done$is_args$args;
        }
        
        location /on-publish-done {
            proxy_pass http://node-backend/on-publish-done$is_args$args;
        }
        
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
            }
            
            root /mnt/;
            add_header Cache-Control no-cache; # Prevent caching of HLS fragments
            add_header Access-Control-Allow-Origin *; # Allow web player to access our playlist
        }
    }
}

# RTMP configuration
rtmp {
  server {
    listen 1935; # Listen on standard RTMP port
    chunk_size 4000; 
    on_connect http://localhost/on-connect;
    
    # This application is to accept incoming stream
    application live {
      live on; # Allows live input
      on_play http://localhost/on-play;
      on_publish http://localhost/on-publish;
      on_publish_done http://localhost/on-publish-done;
      on_play_done http://localhost/on-play-done;
      
      # Once receive stream, transcode for adaptive streaming
      # This single ffmpeg command takes the input and transforms
      # the source into 4 different streams with different bitrate
      # and quality. P.S. The scaling done here respects the aspect
      # ratio of the input.
      exec ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
                  -c:v libx264 -c:a libvo_aacenc -b:v 256k -b:a 32k -vf "scale=320:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_low
                  -c:v libx264 -c:a libvo_aacenc -b:v 768k -b:a 96k -vf "scale=640:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_mid
                  -c:v libx264 -c:a libvo_aacenc -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_hd
                  -c copy -f flv rtmp://localhost/youtube/$name?$args
                  -c copy -f flv rtmp://localhost/twitch/$name?$args
                  -c copy -f flv rtmp://localhost/facebook/$name?$args;
    }
    
    # This application is for splitting the stream into HLS fragments
    application show {
        live on; # Allows live input from above
        hls on; # Enable HTTP Live Streaming
        
        # Pointing this to an SSD is better as this involves lots of IO
        hls_path /mnt/hls/;

        # Nested paths?
        hls_nested on;
        
        # Instruct clients to adjust resolution according to bandwidth
        hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
        hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
        hls_variant _hd BANDWIDTH=2048000; # High bitrate, HD 720p resolution
    }
    
    application youtube {
      live on; # Allows live input from above
      on_publish http://localhost/on-youtube-publish;
    }
    
    application twitch {
      live on; # Allows live input from above
      on_publish http://localhost/on-twitch-publish;
    }
    
    application facebook {
      live on; # Allows live input from above
      on_publish http://localhost/on-facebook-publish;
    }
  }
}